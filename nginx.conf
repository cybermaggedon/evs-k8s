server {
    listen  443 ssl;
    server_name  login.cyberapocalypse.co.uk;

    ssl_certificate /etc/tls/login/server.crt;
    ssl_certificate_key /etc/tls/login/server.key;

 location / {
      proxy_pass http://vouch:9090;
      # be sure to pass the original host header
      proxy_set_header Host $http_host;
    }

}

server {
    listen  443 ssl;
    server_name  portal.cyberapocalypse.co.uk;

    ssl_certificate /etc/tls/portal/server.crt;
    ssl_certificate_key /etc/tls/portal/server.key;

    # https://github.com/vouch/vouch-proxy
    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;
    auth_request_set $auth_user $upstream_http_x_vouch_user;

    proxy_set_header Remote-User $auth_user;

    location = /validate {

        # /validate proxies all the requests to lasso
        # lasso can also run behind the same nginx-revproxy
         proxy_pass https://login.cyberapocalypse.co.uk/validate;
#          proxy_pass http://vouch:9090;

        # lasso only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        # valid user!
        # add X-Vouch-User to the request
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to vouch proxy for login
        return 302 https://login.cyberapocalypse.co.uk/login?url=$scheme://$http_host$request_uri&lasso-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }
    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location /grafana/ {
        proxy_pass http://grafana:3000/;
    }

    location /prometheus/ {
        proxy_pass http://prometheus:9090/;
    }

    location /risk-graph/ {
        proxy_pass http://risk-graph:8080/;
    }

    location /threat-graph/ {
        proxy_pass http://threat-graph:8080/;
    }

 location /kibana/ {
            proxy_pass http://kibana:5601/;
        }

    location /elasticsearch/ {
        proxy_pass http://elasticsearch:9200/;
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}
